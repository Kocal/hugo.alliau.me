deptrac:
    cache_file: .cache/deptrac_layers.cache
    
    paths:
        - ./src

    layers:
        - name: Domain
          collectors:
              - { type: classLike, value: ^App\\.+\\Domain\\ }

        - name: Infrastructure
          collectors:
              - { type: classLike, value: ^App\\.+\\Infrastructure\\ }

        - name: Native
          collectors:
              - { type: classLike, value: '^[a-zA-Z]+$' }
            
        - name: Vendor_Doctrine_Mapping
          collectors:
            - { type: classLike, value: ^Doctrine\\Orm\\Mapping }
            - { type: classLike, value: ^Doctrine\\DBAL\\Types }
    
        - name: Vendor_Symfony_Assert
          collectors:
            - { type: classLike, value: ^Symfony\\Component\\Validator\\Constraints }

        - name: Vendor
          collectors:
              - type: bool
                must:
                    - { type: classLike, value: ^(?!App\\) }
                must_not:
                    - { type: layer, value: Native }
                    - { type: layer, value: Vendor_Doctrine_Mapping }
                    - { type: layer, value: Vendor_Symfony_Assert }

    ruleset:
        Domain: [Native, Vendor_Doctrine_Mapping, Vendor_Symfony_Assert]
        Infrastructure: [Domain, Native, Vendor, Vendor_Doctrine_Mapping, Vendor_Symfony_Assert]

    skip_violations:
        # My User entity is bound to Symfony Security, what's the best way to not violate this?
        App\User\Domain\User:
            - Symfony\Component\Security\Core\User\UserInterface
            - Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface
            
        App\Places\Domain\Google\Place\Autocomplete:
            - CuyZ\ValinorBundle\Cache\WarmupForMapper
